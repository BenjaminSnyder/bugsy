State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On program shift to state 1
-- On decls shift to state 2
## Reductions:
-- On VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL
--   reduce production decls ->

State 1:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 2:
## Known stack suffix:
## decls
## LR(1) items:
decls -> decls . vdecl [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL ]
decls -> decls . fdecl [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL ]
decls -> decls . cdecl [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL ]
program -> decls . EOF [ # ]
## Transitions:
-- On VOID shift to state 3
-- On TRIANGLE shift to state 4
-- On STRING shift to state 5
-- On SQUARE shift to state 6
-- On SPLINE shift to state 7
-- On SHAPE shift to state 8
-- On REGAGON shift to state 9
-- On RECT shift to state 10
-- On POLYGON shift to state 11
-- On NUM shift to state 12
-- On LINE shift to state 13
-- On EOF shift to state 14
-- On ELLIPSE shift to state 15
-- On CLASS shift to state 16
-- On CIRCLE shift to state 23
-- On CHAR shift to state 24
-- On CANVAS shift to state 25
-- On BOOL shift to state 26
-- On vdecl shift to state 142
-- On typ shift to state 131
-- On obj shift to state 32
-- On fdecl shift to state 143
-- On cdecl shift to state 144
-- On arr shift to state 125
## Reductions:

State 3:
## Known stack suffix:
## VOID
## LR(1) items:
typ -> VOID . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production typ -> VOID

State 4:
## Known stack suffix:
## TRIANGLE
## LR(1) items:
obj -> TRIANGLE . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production obj -> TRIANGLE

State 5:
## Known stack suffix:
## STRING
## LR(1) items:
typ -> STRING . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production typ -> STRING

State 6:
## Known stack suffix:
## SQUARE
## LR(1) items:
obj -> SQUARE . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production obj -> SQUARE

State 7:
## Known stack suffix:
## SPLINE
## LR(1) items:
obj -> SPLINE . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production obj -> SPLINE

State 8:
## Known stack suffix:
## SHAPE
## LR(1) items:
obj -> SHAPE . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production obj -> SHAPE

State 9:
## Known stack suffix:
## REGAGON
## LR(1) items:
obj -> REGAGON . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production obj -> REGAGON

State 10:
## Known stack suffix:
## RECT
## LR(1) items:
obj -> RECT . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production obj -> RECT

State 11:
## Known stack suffix:
## POLYGON
## LR(1) items:
obj -> POLYGON . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production obj -> POLYGON

State 12:
## Known stack suffix:
## NUM
## LR(1) items:
typ -> NUM . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production typ -> NUM

State 13:
## Known stack suffix:
## LINE
## LR(1) items:
obj -> LINE . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production obj -> LINE

State 14:
## Known stack suffix:
## decls EOF
## LR(1) items:
program -> decls EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> decls EOF

State 15:
## Known stack suffix:
## ELLIPSE
## LR(1) items:
obj -> ELLIPSE . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production obj -> ELLIPSE

State 16:
## Known stack suffix:
## CLASS
## LR(1) items:
cdecl -> CLASS . ID LBRACE cddecls RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On ID shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## CLASS ID
## LR(1) items:
cdecl -> CLASS ID . LBRACE cddecls RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On LBRACE shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## CLASS ID LBRACE
## LR(1) items:
cdecl -> CLASS ID LBRACE . cddecls RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On cddecls shift to state 19
## Reductions:
-- On VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL
--   reduce production cddecls ->

State 19:
## Known stack suffix:
## CLASS ID LBRACE cddecls
## LR(1) items:
cddecls -> cddecls . vdecl [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
cddecls -> cddecls . const_decl [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
cddecls -> cddecls . fdecl [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
cdecl -> CLASS ID LBRACE cddecls . RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On VOID shift to state 3
-- On TRIANGLE shift to state 4
-- On STRING shift to state 5
-- On SQUARE shift to state 6
-- On SPLINE shift to state 7
-- On SHAPE shift to state 8
-- On REGAGON shift to state 9
-- On RECT shift to state 10
-- On RBRACE shift to state 20
-- On POLYGON shift to state 11
-- On NUM shift to state 12
-- On LINE shift to state 13
-- On ELLIPSE shift to state 15
-- On CONSTRUCTOR shift to state 21
-- On CIRCLE shift to state 23
-- On CHAR shift to state 24
-- On CANVAS shift to state 25
-- On BOOL shift to state 26
-- On vdecl shift to state 130
-- On typ shift to state 131
-- On obj shift to state 32
-- On fdecl shift to state 140
-- On const_decl shift to state 141
-- On arr shift to state 125
## Reductions:

State 20:
## Known stack suffix:
## CLASS ID LBRACE cddecls RBRACE
## LR(1) items:
cdecl -> CLASS ID LBRACE cddecls RBRACE . [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
## Reductions:
-- On VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL
--   reduce production cdecl -> CLASS ID LBRACE cddecls RBRACE

State 21:
## Known stack suffix:
## CONSTRUCTOR
## LR(1) items:
const_decl -> CONSTRUCTOR . LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On LPAREN shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## CONSTRUCTOR LPAREN
## LR(1) items:
const_decl -> CONSTRUCTOR LPAREN . formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On VOID shift to state 3
-- On TRIANGLE shift to state 4
-- On STRING shift to state 5
-- On SQUARE shift to state 6
-- On SPLINE shift to state 7
-- On SHAPE shift to state 8
-- On REGAGON shift to state 9
-- On RECT shift to state 10
-- On POLYGON shift to state 11
-- On NUM shift to state 12
-- On LINE shift to state 13
-- On ELLIPSE shift to state 15
-- On CIRCLE shift to state 23
-- On CHAR shift to state 24
-- On CANVAS shift to state 25
-- On BOOL shift to state 26
-- On typ shift to state 27
-- On obj shift to state 32
-- On formals_opt shift to state 33
-- On formal_list shift to state 126
-- On arr shift to state 125
## Reductions:
-- On RPAREN
--   reduce production formals_opt ->

State 23:
## Known stack suffix:
## CIRCLE
## LR(1) items:
obj -> CIRCLE . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production obj -> CIRCLE

State 24:
## Known stack suffix:
## CHAR
## LR(1) items:
typ -> CHAR . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production typ -> CHAR

State 25:
## Known stack suffix:
## CANVAS
## LR(1) items:
obj -> CANVAS . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production obj -> CANVAS

State 26:
## Known stack suffix:
## BOOL
## LR(1) items:
typ -> BOOL . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production typ -> BOOL

State 27:
## Known stack suffix:
## typ
## LR(1) items:
arr -> typ . LSQBRACKET NUM RSQBRACKET [ LSQBRACKET ID ]
formal_list -> typ . ID [ RPAREN COMMA ]
## Transitions:
-- On LSQBRACKET shift to state 28
-- On ID shift to state 31
## Reductions:

State 28:
## Known stack suffix:
## typ LSQBRACKET
## LR(1) items:
arr -> typ LSQBRACKET . NUM RSQBRACKET [ LSQBRACKET ID ]
## Transitions:
-- On NUM shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## typ LSQBRACKET NUM
## LR(1) items:
arr -> typ LSQBRACKET NUM . RSQBRACKET [ LSQBRACKET ID ]
## Transitions:
-- On RSQBRACKET shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## typ LSQBRACKET NUM RSQBRACKET
## LR(1) items:
arr -> typ LSQBRACKET NUM RSQBRACKET . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production arr -> typ LSQBRACKET NUM RSQBRACKET

State 31:
## Known stack suffix:
## typ ID
## LR(1) items:
formal_list -> typ ID . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production formal_list -> typ ID

State 32:
## Known stack suffix:
## obj
## LR(1) items:
typ -> obj . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production typ -> obj

State 33:
## Known stack suffix:
## CONSTRUCTOR LPAREN formals_opt
## LR(1) items:
const_decl -> CONSTRUCTOR LPAREN formals_opt . RPAREN LBRACE vdecl_list stmt_list RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On RPAREN shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## CONSTRUCTOR LPAREN formals_opt RPAREN
## LR(1) items:
const_decl -> CONSTRUCTOR LPAREN formals_opt RPAREN . LBRACE vdecl_list stmt_list RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On LBRACE shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## CONSTRUCTOR LPAREN formals_opt RPAREN LBRACE
## LR(1) items:
const_decl -> CONSTRUCTOR LPAREN formals_opt RPAREN LBRACE . vdecl_list stmt_list RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On vdecl_list shift to state 36
## Reductions:
-- On WHILE VOID TRUE TRIANGLE STRING SQUARE SPLINE SHAPE RETURN REGAGON RECT RBRACE POLYGON NUM NOT MINUS LSQBRACKET LPAREN LITERAL LINE LBRACE IF ID FOR FALSE ELLIPSE CIRCLE CHAR CANVAS BOOL
--   reduce production vdecl_list ->

State 36:
## Known stack suffix:
## CONSTRUCTOR LPAREN formals_opt RPAREN LBRACE vdecl_list
## LR(1) items:
const_decl -> CONSTRUCTOR LPAREN formals_opt RPAREN LBRACE vdecl_list . stmt_list RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
vdecl_list -> vdecl_list . vdecl [ WHILE VOID TRUE TRIANGLE STRING SQUARE SPLINE SHAPE RETURN REGAGON RECT RBRACE POLYGON NUM NOT MINUS LSQBRACKET LPAREN LITERAL LINE LBRACE IF ID FOR FALSE ELLIPSE CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On VOID shift to state 3
-- On TRIANGLE shift to state 4
-- On STRING shift to state 5
-- On SQUARE shift to state 6
-- On SPLINE shift to state 7
-- On SHAPE shift to state 8
-- On REGAGON shift to state 9
-- On RECT shift to state 10
-- On POLYGON shift to state 11
-- On NUM shift to state 12
-- On LINE shift to state 13
-- On ELLIPSE shift to state 15
-- On CIRCLE shift to state 23
-- On CHAR shift to state 24
-- On CANVAS shift to state 25
-- On BOOL shift to state 26
-- On vdecl shift to state 37
-- On typ shift to state 38
-- On stmt_list shift to state 41
-- On obj shift to state 32
-- On arr shift to state 125
## Reductions:
-- On WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE
--   reduce production stmt_list ->

State 37:
## Known stack suffix:
## vdecl_list vdecl
## LR(1) items:
vdecl_list -> vdecl_list vdecl . [ WHILE VOID TRUE TRIANGLE STRING SQUARE SPLINE SHAPE RETURN REGAGON RECT RBRACE POLYGON NUM NOT MINUS LSQBRACKET LPAREN LITERAL LINE LBRACE IF ID FOR FALSE ELLIPSE CIRCLE CHAR CANVAS BOOL ]
## Transitions:
## Reductions:
-- On WHILE VOID TRUE TRIANGLE STRING SQUARE SPLINE SHAPE RETURN REGAGON RECT RBRACE POLYGON NUM NOT MINUS LSQBRACKET LPAREN LITERAL LINE LBRACE IF ID FOR FALSE ELLIPSE CIRCLE CHAR CANVAS BOOL
--   reduce production vdecl_list -> vdecl_list vdecl

State 38:
## Known stack suffix:
## typ
## LR(1) items:
arr -> typ . LSQBRACKET NUM RSQBRACKET [ LSQBRACKET ID ]
vdecl -> typ . ID SEMI [ WHILE VOID TRUE TRIANGLE STRING SQUARE SPLINE SHAPE RETURN REGAGON RECT RBRACE POLYGON NUM NOT MINUS LSQBRACKET LPAREN LITERAL LINE LBRACE IF ID FOR FALSE ELLIPSE CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On LSQBRACKET shift to state 28
-- On ID shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## typ ID
## LR(1) items:
vdecl -> typ ID . SEMI [ WHILE VOID TRUE TRIANGLE STRING SQUARE SPLINE SHAPE RETURN REGAGON RECT RBRACE POLYGON NUM NOT MINUS LSQBRACKET LPAREN LITERAL LINE LBRACE IF ID FOR FALSE ELLIPSE CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On SEMI shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## typ ID SEMI
## LR(1) items:
vdecl -> typ ID SEMI . [ WHILE VOID TRUE TRIANGLE STRING SQUARE SPLINE SHAPE RETURN REGAGON RECT RBRACE POLYGON NUM NOT MINUS LSQBRACKET LPAREN LITERAL LINE LBRACE IF ID FOR FALSE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
## Reductions:
-- On WHILE VOID TRUE TRIANGLE STRING SQUARE SPLINE SHAPE RETURN REGAGON RECT RBRACE POLYGON NUM NOT MINUS LSQBRACKET LPAREN LITERAL LINE LBRACE IF ID FOR FALSE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL
--   reduce production vdecl -> typ ID SEMI

State 41:
## Known stack suffix:
## CONSTRUCTOR LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list
## LR(1) items:
const_decl -> CONSTRUCTOR LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list . RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
stmt_list -> stmt_list . stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ]
## Transitions:
-- On WHILE shift to state 42
-- On TRUE shift to state 44
-- On RETURN shift to state 96
-- On RBRACE shift to state 124
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On LBRACE shift to state 100
-- On IF shift to state 103
-- On ID shift to state 50
-- On FOR shift to state 107
-- On FALSE shift to state 52
-- On stmt shift to state 122
-- On expr shift to state 116
## Reductions:

State 42:
## Known stack suffix:
## WHILE
## LR(1) items:
stmt -> WHILE . LPAREN expr RPAREN stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On LPAREN shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## WHILE LPAREN
## LR(1) items:
stmt -> WHILE LPAREN . expr RPAREN stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 94
## Reductions:

State 44:
## Known stack suffix:
## TRUE
## LR(1) items:
expr -> TRUE . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND
--   reduce production expr -> TRUE

State 45:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 93
## Reductions:

State 46:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 92
## Reductions:

State 47:
## Known stack suffix:
## LSQBRACKET
## LR(1) items:
expr -> LSQBRACKET . li_contents RSQBRACKET [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On li_contents shift to state 87
-- On expr shift to state 89
## Reductions:

State 48:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 85
## Reductions:

State 49:
## Known stack suffix:
## LITERAL
## LR(1) items:
expr -> LITERAL . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND
--   reduce production expr -> LITERAL

State 50:
## Known stack suffix:
## ID
## LR(1) items:
expr -> ID . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> ID . LPAREN actuals_opt RPAREN [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> ID . ASSIGN expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On LPAREN shift to state 51
-- On ASSIGN shift to state 83
## Reductions:
-- On SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND
--   reduce production expr -> ID

State 51:
## Known stack suffix:
## ID LPAREN
## LR(1) items:
expr -> ID LPAREN . actuals_opt RPAREN [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 53
-- On actuals_opt shift to state 78
-- On actuals_list shift to state 80
## Reductions:
-- On RPAREN
--   reduce production actuals_opt ->

State 52:
## Known stack suffix:
## FALSE
## LR(1) items:
expr -> FALSE . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND
--   reduce production expr -> FALSE

State 53:
## Known stack suffix:
## expr
## LR(1) items:
actuals_list -> expr . [ RPAREN COMMA ]
expr -> expr . EQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On PLUS shift to state 54
-- On OR shift to state 60
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
-- On AND shift to state 76
## Reductions:
-- On RPAREN COMMA
--   reduce production actuals_list -> expr

State 54:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr PLUS expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On MULT shift to state 56
-- On DIV shift to state 58
## Reductions:
-- On SEMI RSQBRACKET RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ COMMA AND
--   reduce production expr -> expr PLUS expr

State 56:
## Known stack suffix:
## expr MULT
## LR(1) items:
expr -> expr MULT . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## expr MULT expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr MULT expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND
--   reduce production expr -> expr MULT expr

State 58:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr DIV expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND
--   reduce production expr -> expr DIV expr

State 60:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr OR expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On PLUS shift to state 54
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
-- On AND shift to state 76
## Reductions:
-- On SEMI RSQBRACKET RPAREN OR COMMA
--   reduce production expr -> expr OR expr

State 62:
## Known stack suffix:
## expr NEQ
## LR(1) items:
expr -> expr NEQ . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## expr NEQ expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr NEQ expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On PLUS shift to state 54
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On DIV shift to state 58
## Reductions:
-- On SEMI RSQBRACKET RPAREN OR NEQ EQ COMMA AND
--   reduce production expr -> expr NEQ expr

State 64:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr MINUS expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On MULT shift to state 56
-- On DIV shift to state 58
## Reductions:
-- On SEMI RSQBRACKET RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQ COMMA AND
--   reduce production expr -> expr MINUS expr

State 66:
## Known stack suffix:
## expr LT
## LR(1) items:
expr -> expr LT . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## expr LT expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr LT expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On PLUS shift to state 54
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On DIV shift to state 58
## Reductions:
-- On SEMI RSQBRACKET RPAREN OR NEQ LT LEQ GT GEQ EQ COMMA AND
--   reduce production expr -> expr LT expr

State 68:
## Known stack suffix:
## expr LEQ
## LR(1) items:
expr -> expr LEQ . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## expr LEQ expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr LEQ expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On PLUS shift to state 54
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On DIV shift to state 58
## Reductions:
-- On SEMI RSQBRACKET RPAREN OR NEQ LT LEQ GT GEQ EQ COMMA AND
--   reduce production expr -> expr LEQ expr

State 70:
## Known stack suffix:
## expr GT
## LR(1) items:
expr -> expr GT . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## expr GT expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr GT expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On PLUS shift to state 54
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On DIV shift to state 58
## Reductions:
-- On SEMI RSQBRACKET RPAREN OR NEQ LT LEQ GT GEQ EQ COMMA AND
--   reduce production expr -> expr GT expr

State 72:
## Known stack suffix:
## expr GEQ
## LR(1) items:
expr -> expr GEQ . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## expr GEQ expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr GEQ expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On PLUS shift to state 54
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On DIV shift to state 58
## Reductions:
-- On SEMI RSQBRACKET RPAREN OR NEQ LT LEQ GT GEQ EQ COMMA AND
--   reduce production expr -> expr GEQ expr

State 74:
## Known stack suffix:
## expr EQ
## LR(1) items:
expr -> expr EQ . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## expr EQ expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr EQ expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On PLUS shift to state 54
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On DIV shift to state 58
## Reductions:
-- On SEMI RSQBRACKET RPAREN OR NEQ EQ COMMA AND
--   reduce production expr -> expr EQ expr

State 76:
## Known stack suffix:
## expr AND
## LR(1) items:
expr -> expr AND . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr AND expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On PLUS shift to state 54
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
## Reductions:
-- On SEMI RSQBRACKET RPAREN OR COMMA AND
--   reduce production expr -> expr AND expr

State 78:
## Known stack suffix:
## ID LPAREN actuals_opt
## LR(1) items:
expr -> ID LPAREN actuals_opt . RPAREN [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On RPAREN shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## ID LPAREN actuals_opt RPAREN
## LR(1) items:
expr -> ID LPAREN actuals_opt RPAREN . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND
--   reduce production expr -> ID LPAREN actuals_opt RPAREN

State 80:
## Known stack suffix:
## actuals_list
## LR(1) items:
actuals_list -> actuals_list . COMMA expr [ RPAREN COMMA ]
actuals_opt -> actuals_list . [ RPAREN ]
## Transitions:
-- On COMMA shift to state 81
## Reductions:
-- On RPAREN
--   reduce production actuals_opt -> actuals_list

State 81:
## Known stack suffix:
## actuals_list COMMA
## LR(1) items:
actuals_list -> actuals_list COMMA . expr [ RPAREN COMMA ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## actuals_list COMMA expr
## LR(1) items:
actuals_list -> actuals_list COMMA expr . [ RPAREN COMMA ]
expr -> expr . EQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On PLUS shift to state 54
-- On OR shift to state 60
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
-- On AND shift to state 76
## Reductions:
-- On RPAREN COMMA
--   reduce production actuals_list -> actuals_list COMMA expr

State 83:
## Known stack suffix:
## ID ASSIGN
## LR(1) items:
expr -> ID ASSIGN . expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## ID ASSIGN expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> ID ASSIGN expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On PLUS shift to state 54
-- On OR shift to state 60
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
-- On AND shift to state 76
## Reductions:
-- On SEMI RSQBRACKET RPAREN COMMA
--   reduce production expr -> ID ASSIGN expr

State 85:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . EQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . NEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . PLUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> LPAREN expr . RPAREN [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On RPAREN shift to state 86
-- On PLUS shift to state 54
-- On OR shift to state 60
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
-- On AND shift to state 76
## Reductions:

State 86:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND
--   reduce production expr -> LPAREN expr RPAREN

State 87:
## Known stack suffix:
## LSQBRACKET li_contents
## LR(1) items:
expr -> LSQBRACKET li_contents . RSQBRACKET [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
-- On RSQBRACKET shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## LSQBRACKET li_contents RSQBRACKET
## LR(1) items:
expr -> LSQBRACKET li_contents RSQBRACKET . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND
--   reduce production expr -> LSQBRACKET li_contents RSQBRACKET

State 89:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . EQ expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
li_contents -> expr . [ RSQBRACKET ]
li_contents -> expr . COMMA expr [ RSQBRACKET ]
## Transitions:
-- On PLUS shift to state 54
-- On OR shift to state 60
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
-- On COMMA shift to state 90
-- On AND shift to state 76
## Reductions:
-- On RSQBRACKET
--   reduce production li_contents -> expr

State 90:
## Known stack suffix:
## expr COMMA
## LR(1) items:
li_contents -> expr COMMA . expr [ RSQBRACKET ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## expr COMMA expr
## LR(1) items:
expr -> expr . EQ expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . NEQ expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LT expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LEQ expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GT expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GEQ expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . AND expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . OR expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . PLUS expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MINUS expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MULT expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . DIV expr [ RSQBRACKET PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
li_contents -> expr COMMA expr . [ RSQBRACKET ]
## Transitions:
-- On PLUS shift to state 54
-- On OR shift to state 60
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
-- On AND shift to state 76
## Reductions:
-- On RSQBRACKET
--   reduce production li_contents -> expr COMMA expr

State 92:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> MINUS expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND
--   reduce production expr -> MINUS expr

State 93:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . NEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . LEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . GEQ expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . AND expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . OR expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> NOT expr . [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . PLUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MINUS expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . MULT expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
expr -> expr . DIV expr [ SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RSQBRACKET RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV COMMA AND
--   reduce production expr -> NOT expr

State 94:
## Known stack suffix:
## WHILE LPAREN expr
## LR(1) items:
expr -> expr . EQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . NEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . PLUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
stmt -> WHILE LPAREN expr . RPAREN stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On RPAREN shift to state 95
-- On PLUS shift to state 54
-- On OR shift to state 60
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
-- On AND shift to state 76
## Reductions:

State 95:
## Known stack suffix:
## WHILE LPAREN expr RPAREN
## LR(1) items:
stmt -> WHILE LPAREN expr RPAREN . stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On WHILE shift to state 42
-- On TRUE shift to state 44
-- On RETURN shift to state 96
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On LBRACE shift to state 100
-- On IF shift to state 103
-- On ID shift to state 50
-- On FOR shift to state 107
-- On FALSE shift to state 52
-- On stmt shift to state 123
-- On expr shift to state 116
## Reductions:

State 96:
## Known stack suffix:
## RETURN
## LR(1) items:
stmt -> RETURN . SEMI [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
stmt -> RETURN . expr SEMI [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On TRUE shift to state 44
-- On SEMI shift to state 97
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 98
## Reductions:

State 97:
## Known stack suffix:
## RETURN SEMI
## LR(1) items:
stmt -> RETURN SEMI . [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
## Reductions:
-- On WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE
--   reduce production stmt -> RETURN SEMI

State 98:
## Known stack suffix:
## RETURN expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . NEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LT expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GT expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . AND expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . OR expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . PLUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MINUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MULT expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . DIV expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
stmt -> RETURN expr . SEMI [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On SEMI shift to state 99
-- On PLUS shift to state 54
-- On OR shift to state 60
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
-- On AND shift to state 76
## Reductions:

State 99:
## Known stack suffix:
## RETURN expr SEMI
## LR(1) items:
stmt -> RETURN expr SEMI . [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
## Reductions:
-- On WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE
--   reduce production stmt -> RETURN expr SEMI

State 100:
## Known stack suffix:
## LBRACE
## LR(1) items:
stmt -> LBRACE . stmt_list RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On stmt_list shift to state 101
## Reductions:
-- On WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE
--   reduce production stmt_list ->

State 101:
## Known stack suffix:
## LBRACE stmt_list
## LR(1) items:
stmt -> LBRACE stmt_list . RBRACE [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
stmt_list -> stmt_list . stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ]
## Transitions:
-- On WHILE shift to state 42
-- On TRUE shift to state 44
-- On RETURN shift to state 96
-- On RBRACE shift to state 102
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On LBRACE shift to state 100
-- On IF shift to state 103
-- On ID shift to state 50
-- On FOR shift to state 107
-- On FALSE shift to state 52
-- On stmt shift to state 122
-- On expr shift to state 116
## Reductions:

State 102:
## Known stack suffix:
## LBRACE stmt_list RBRACE
## LR(1) items:
stmt -> LBRACE stmt_list RBRACE . [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
## Reductions:
-- On WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE
--   reduce production stmt -> LBRACE stmt_list RBRACE

State 103:
## Known stack suffix:
## IF
## LR(1) items:
stmt -> IF . LPAREN expr RPAREN stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On LPAREN shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## IF LPAREN
## LR(1) items:
stmt -> IF LPAREN . expr RPAREN stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## IF LPAREN expr
## LR(1) items:
expr -> expr . EQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . NEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . PLUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
stmt -> IF LPAREN expr . RPAREN stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On RPAREN shift to state 106
-- On PLUS shift to state 54
-- On OR shift to state 60
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
-- On AND shift to state 76
## Reductions:

State 106:
## Known stack suffix:
## IF LPAREN expr RPAREN
## LR(1) items:
stmt -> IF LPAREN expr RPAREN . stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On WHILE shift to state 42
-- On TRUE shift to state 44
-- On RETURN shift to state 96
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On LBRACE shift to state 100
-- On IF shift to state 103
-- On ID shift to state 50
-- On FOR shift to state 107
-- On FALSE shift to state 52
-- On stmt shift to state 119
-- On expr shift to state 116
## Reductions:

State 107:
## Known stack suffix:
## FOR
## LR(1) items:
stmt -> FOR . LPAREN expr_opt SEMI expr SEMI expr_opt RPAREN stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On LPAREN shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## FOR LPAREN
## LR(1) items:
stmt -> FOR LPAREN . expr_opt SEMI expr SEMI expr_opt RPAREN stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr_opt shift to state 109
-- On expr shift to state 118
## Reductions:
-- On SEMI
--   reduce production expr_opt ->

State 109:
## Known stack suffix:
## FOR LPAREN expr_opt
## LR(1) items:
stmt -> FOR LPAREN expr_opt . SEMI expr SEMI expr_opt RPAREN stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On SEMI shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## FOR LPAREN expr_opt SEMI
## LR(1) items:
stmt -> FOR LPAREN expr_opt SEMI . expr SEMI expr_opt RPAREN stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## FOR LPAREN expr_opt SEMI expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . NEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LT expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GT expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . AND expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . OR expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . PLUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MINUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MULT expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . DIV expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
stmt -> FOR LPAREN expr_opt SEMI expr . SEMI expr_opt RPAREN stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On SEMI shift to state 112
-- On PLUS shift to state 54
-- On OR shift to state 60
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
-- On AND shift to state 76
## Reductions:

State 112:
## Known stack suffix:
## FOR LPAREN expr_opt SEMI expr SEMI
## LR(1) items:
stmt -> FOR LPAREN expr_opt SEMI expr SEMI . expr_opt RPAREN stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On TRUE shift to state 44
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On ID shift to state 50
-- On FALSE shift to state 52
-- On expr_opt shift to state 113
-- On expr shift to state 118
## Reductions:
-- On RPAREN
--   reduce production expr_opt ->

State 113:
## Known stack suffix:
## FOR LPAREN expr_opt SEMI expr SEMI expr_opt
## LR(1) items:
stmt -> FOR LPAREN expr_opt SEMI expr SEMI expr_opt . RPAREN stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On RPAREN shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## FOR LPAREN expr_opt SEMI expr SEMI expr_opt RPAREN
## LR(1) items:
stmt -> FOR LPAREN expr_opt SEMI expr SEMI expr_opt RPAREN . stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On WHILE shift to state 42
-- On TRUE shift to state 44
-- On RETURN shift to state 96
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On LBRACE shift to state 100
-- On IF shift to state 103
-- On ID shift to state 50
-- On FOR shift to state 107
-- On FALSE shift to state 52
-- On stmt shift to state 115
-- On expr shift to state 116
## Reductions:

State 115:
## Known stack suffix:
## FOR LPAREN expr_opt SEMI expr SEMI expr_opt RPAREN stmt
## LR(1) items:
stmt -> FOR LPAREN expr_opt SEMI expr SEMI expr_opt RPAREN stmt . [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
## Reductions:
-- On WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE
--   reduce production stmt -> FOR LPAREN expr_opt SEMI expr SEMI expr_opt RPAREN stmt

State 116:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . NEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LT expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GT expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . AND expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . OR expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . PLUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MINUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MULT expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . DIV expr [ SEMI PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
stmt -> expr . SEMI [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On SEMI shift to state 117
-- On PLUS shift to state 54
-- On OR shift to state 60
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
-- On AND shift to state 76
## Reductions:

State 117:
## Known stack suffix:
## expr SEMI
## LR(1) items:
stmt -> expr SEMI . [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
## Reductions:
-- On WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE
--   reduce production stmt -> expr SEMI

State 118:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . EQ expr [ SEMI RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . NEQ expr [ SEMI RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LT expr [ SEMI RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . LEQ expr [ SEMI RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GT expr [ SEMI RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . GEQ expr [ SEMI RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . AND expr [ SEMI RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . OR expr [ SEMI RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . PLUS expr [ SEMI RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MINUS expr [ SEMI RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . MULT expr [ SEMI RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr -> expr . DIV expr [ SEMI RPAREN PLUS OR NEQ MULT MINUS LT LEQ GT GEQ EQ DIV AND ]
expr_opt -> expr . [ SEMI RPAREN ]
## Transitions:
-- On PLUS shift to state 54
-- On OR shift to state 60
-- On NEQ shift to state 62
-- On MULT shift to state 56
-- On MINUS shift to state 64
-- On LT shift to state 66
-- On LEQ shift to state 68
-- On GT shift to state 70
-- On GEQ shift to state 72
-- On EQ shift to state 74
-- On DIV shift to state 58
-- On AND shift to state 76
## Reductions:
-- On SEMI RPAREN
--   reduce production expr_opt -> expr

State 119:
## Known stack suffix:
## IF LPAREN expr RPAREN stmt
## LR(1) items:
stmt -> IF LPAREN expr RPAREN stmt . [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On ELSE shift to state 120
## Reductions:
-- On WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE
--   reduce production stmt -> IF LPAREN expr RPAREN stmt

State 120:
## Known stack suffix:
## IF LPAREN expr RPAREN stmt ELSE
## LR(1) items:
stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
-- On WHILE shift to state 42
-- On TRUE shift to state 44
-- On RETURN shift to state 96
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On LBRACE shift to state 100
-- On IF shift to state 103
-- On ID shift to state 50
-- On FOR shift to state 107
-- On FALSE shift to state 52
-- On stmt shift to state 121
-- On expr shift to state 116
## Reductions:

State 121:
## Known stack suffix:
## IF LPAREN expr RPAREN stmt ELSE stmt
## LR(1) items:
stmt -> IF LPAREN expr RPAREN stmt ELSE stmt . [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
## Reductions:
-- On WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE
--   reduce production stmt -> IF LPAREN expr RPAREN stmt ELSE stmt

State 122:
## Known stack suffix:
## stmt_list stmt
## LR(1) items:
stmt_list -> stmt_list stmt . [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ]
## Transitions:
## Reductions:
-- On WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE
--   reduce production stmt_list -> stmt_list stmt

State 123:
## Known stack suffix:
## WHILE LPAREN expr RPAREN stmt
## LR(1) items:
stmt -> WHILE LPAREN expr RPAREN stmt . [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE ]
## Transitions:
## Reductions:
-- On WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ELSE
--   reduce production stmt -> WHILE LPAREN expr RPAREN stmt

State 124:
## Known stack suffix:
## CONSTRUCTOR LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE
## LR(1) items:
const_decl -> CONSTRUCTOR LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE . [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
## Transitions:
## Reductions:
-- On VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL
--   reduce production const_decl -> CONSTRUCTOR LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE

State 125:
## Known stack suffix:
## arr
## LR(1) items:
typ -> arr . [ LSQBRACKET ID ]
## Transitions:
## Reductions:
-- On LSQBRACKET ID
--   reduce production typ -> arr

State 126:
## Known stack suffix:
## formal_list
## LR(1) items:
formal_list -> formal_list . COMMA typ ID [ RPAREN COMMA ]
formals_opt -> formal_list . [ RPAREN ]
## Transitions:
-- On COMMA shift to state 127
## Reductions:
-- On RPAREN
--   reduce production formals_opt -> formal_list

State 127:
## Known stack suffix:
## formal_list COMMA
## LR(1) items:
formal_list -> formal_list COMMA . typ ID [ RPAREN COMMA ]
## Transitions:
-- On VOID shift to state 3
-- On TRIANGLE shift to state 4
-- On STRING shift to state 5
-- On SQUARE shift to state 6
-- On SPLINE shift to state 7
-- On SHAPE shift to state 8
-- On REGAGON shift to state 9
-- On RECT shift to state 10
-- On POLYGON shift to state 11
-- On NUM shift to state 12
-- On LINE shift to state 13
-- On ELLIPSE shift to state 15
-- On CIRCLE shift to state 23
-- On CHAR shift to state 24
-- On CANVAS shift to state 25
-- On BOOL shift to state 26
-- On typ shift to state 128
-- On obj shift to state 32
-- On arr shift to state 125
## Reductions:

State 128:
## Known stack suffix:
## formal_list COMMA typ
## LR(1) items:
arr -> typ . LSQBRACKET NUM RSQBRACKET [ LSQBRACKET ID ]
formal_list -> formal_list COMMA typ . ID [ RPAREN COMMA ]
## Transitions:
-- On LSQBRACKET shift to state 28
-- On ID shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## formal_list COMMA typ ID
## LR(1) items:
formal_list -> formal_list COMMA typ ID . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production formal_list -> formal_list COMMA typ ID

State 130:
## Known stack suffix:
## cddecls vdecl
## LR(1) items:
cddecls -> cddecls vdecl . [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
## Transitions:
## Reductions:
-- On VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL
--   reduce production cddecls -> cddecls vdecl

State 131:
## Known stack suffix:
## typ
## LR(1) items:
arr -> typ . LSQBRACKET NUM RSQBRACKET [ LSQBRACKET ID ]
fdecl -> typ . ID LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL ]
vdecl -> typ . ID SEMI [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On LSQBRACKET shift to state 28
-- On ID shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## typ ID
## LR(1) items:
fdecl -> typ ID . LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL ]
vdecl -> typ ID . SEMI [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On SEMI shift to state 40
-- On LPAREN shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## typ ID LPAREN
## LR(1) items:
fdecl -> typ ID LPAREN . formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On VOID shift to state 3
-- On TRIANGLE shift to state 4
-- On STRING shift to state 5
-- On SQUARE shift to state 6
-- On SPLINE shift to state 7
-- On SHAPE shift to state 8
-- On REGAGON shift to state 9
-- On RECT shift to state 10
-- On POLYGON shift to state 11
-- On NUM shift to state 12
-- On LINE shift to state 13
-- On ELLIPSE shift to state 15
-- On CIRCLE shift to state 23
-- On CHAR shift to state 24
-- On CANVAS shift to state 25
-- On BOOL shift to state 26
-- On typ shift to state 27
-- On obj shift to state 32
-- On formals_opt shift to state 134
-- On formal_list shift to state 126
-- On arr shift to state 125
## Reductions:
-- On RPAREN
--   reduce production formals_opt ->

State 134:
## Known stack suffix:
## typ ID LPAREN formals_opt
## LR(1) items:
fdecl -> typ ID LPAREN formals_opt . RPAREN LBRACE vdecl_list stmt_list RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On RPAREN shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## typ ID LPAREN formals_opt RPAREN
## LR(1) items:
fdecl -> typ ID LPAREN formals_opt RPAREN . LBRACE vdecl_list stmt_list RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On LBRACE shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## typ ID LPAREN formals_opt RPAREN LBRACE
## LR(1) items:
fdecl -> typ ID LPAREN formals_opt RPAREN LBRACE . vdecl_list stmt_list RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On vdecl_list shift to state 137
## Reductions:
-- On WHILE VOID TRUE TRIANGLE STRING SQUARE SPLINE SHAPE RETURN REGAGON RECT RBRACE POLYGON NUM NOT MINUS LSQBRACKET LPAREN LITERAL LINE LBRACE IF ID FOR FALSE ELLIPSE CIRCLE CHAR CANVAS BOOL
--   reduce production vdecl_list ->

State 137:
## Known stack suffix:
## typ ID LPAREN formals_opt RPAREN LBRACE vdecl_list
## LR(1) items:
fdecl -> typ ID LPAREN formals_opt RPAREN LBRACE vdecl_list . stmt_list RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL ]
vdecl_list -> vdecl_list . vdecl [ WHILE VOID TRUE TRIANGLE STRING SQUARE SPLINE SHAPE RETURN REGAGON RECT RBRACE POLYGON NUM NOT MINUS LSQBRACKET LPAREN LITERAL LINE LBRACE IF ID FOR FALSE ELLIPSE CIRCLE CHAR CANVAS BOOL ]
## Transitions:
-- On VOID shift to state 3
-- On TRIANGLE shift to state 4
-- On STRING shift to state 5
-- On SQUARE shift to state 6
-- On SPLINE shift to state 7
-- On SHAPE shift to state 8
-- On REGAGON shift to state 9
-- On RECT shift to state 10
-- On POLYGON shift to state 11
-- On NUM shift to state 12
-- On LINE shift to state 13
-- On ELLIPSE shift to state 15
-- On CIRCLE shift to state 23
-- On CHAR shift to state 24
-- On CANVAS shift to state 25
-- On BOOL shift to state 26
-- On vdecl shift to state 37
-- On typ shift to state 38
-- On stmt_list shift to state 138
-- On obj shift to state 32
-- On arr shift to state 125
## Reductions:
-- On WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE
--   reduce production stmt_list ->

State 138:
## Known stack suffix:
## typ ID LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list
## LR(1) items:
fdecl -> typ ID LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list . RBRACE [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL ]
stmt_list -> stmt_list . stmt [ WHILE TRUE RETURN RBRACE NOT MINUS LSQBRACKET LPAREN LITERAL LBRACE IF ID FOR FALSE ]
## Transitions:
-- On WHILE shift to state 42
-- On TRUE shift to state 44
-- On RETURN shift to state 96
-- On RBRACE shift to state 139
-- On NOT shift to state 45
-- On MINUS shift to state 46
-- On LSQBRACKET shift to state 47
-- On LPAREN shift to state 48
-- On LITERAL shift to state 49
-- On LBRACE shift to state 100
-- On IF shift to state 103
-- On ID shift to state 50
-- On FOR shift to state 107
-- On FALSE shift to state 52
-- On stmt shift to state 122
-- On expr shift to state 116
## Reductions:

State 139:
## Known stack suffix:
## typ ID LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE
## LR(1) items:
fdecl -> typ ID LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE . [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
## Reductions:
-- On VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE EOF ELLIPSE CONSTRUCTOR CLASS CIRCLE CHAR CANVAS BOOL
--   reduce production fdecl -> typ ID LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE

State 140:
## Known stack suffix:
## cddecls fdecl
## LR(1) items:
cddecls -> cddecls fdecl . [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
## Transitions:
## Reductions:
-- On VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL
--   reduce production cddecls -> cddecls fdecl

State 141:
## Known stack suffix:
## cddecls const_decl
## LR(1) items:
cddecls -> cddecls const_decl . [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL ]
## Transitions:
## Reductions:
-- On VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT RBRACE POLYGON NUM LINE ELLIPSE CONSTRUCTOR CIRCLE CHAR CANVAS BOOL
--   reduce production cddecls -> cddecls const_decl

State 142:
## Known stack suffix:
## decls vdecl
## LR(1) items:
decls -> decls vdecl . [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
## Reductions:
-- On VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL
--   reduce production decls -> decls vdecl

State 143:
## Known stack suffix:
## decls fdecl
## LR(1) items:
decls -> decls fdecl . [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
## Reductions:
-- On VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL
--   reduce production decls -> decls fdecl

State 144:
## Known stack suffix:
## decls cdecl
## LR(1) items:
decls -> decls cdecl . [ VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL ]
## Transitions:
## Reductions:
-- On VOID TRIANGLE STRING SQUARE SPLINE SHAPE REGAGON RECT POLYGON NUM LINE EOF ELLIPSE CLASS CIRCLE CHAR CANVAS BOOL
--   reduce production decls -> decls cdecl

