type token =
  | CONSTRUCTOR
  | CLASS
  | NULL
  | CONTINUE
  | BREAK
  | TRY
  | CATCH
  | RAISE
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LSQBRACKET
  | RSQBRACKET
  | COLON
  | SEMI
  | COMMA
  | QMARK
  | PLUS
  | MINUS
  | MULT
  | DIV
  | ASSIGN
  | MODULO
  | INCREMENT
  | DECREMENT
  | PLUSEQ
  | MINUSEQ
  | MULTEQ
  | DIVEQ
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | NOT
  | RETURN
  | IF
  | ELIF
  | ELSE
  | FOR
  | WHILE
  | NUM
  | BOOL
  | VOID
  | STRING
  | CHAR
  | POINT
  | SHAPE
  | SQUARE
  | RECT
  | CIRCLE
  | ELLIPSE
  | TRIANGLE
  | POLYGON
  | REGAGON
  | CANVAS
  | LINE
  | SPLINE
  | ARRAY
  | LITERAL of (int)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
let fst' = (fs,_,_)->fs
let snd' = (_,sn,_)->sn
let trd  = (_,_,tr)->tr
# 79 "parser.ml"
let yytransl_const = [|
  257 (* CONSTRUCTOR *);
  258 (* CLASS *);
  259 (* NULL *);
  260 (* CONTINUE *);
  261 (* BREAK *);
  262 (* TRY *);
  263 (* CATCH *);
  264 (* RAISE *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* LBRACE *);
  268 (* RBRACE *);
  269 (* LSQBRACKET *);
  270 (* RSQBRACKET *);
  271 (* COLON *);
  272 (* SEMI *);
  273 (* COMMA *);
  274 (* QMARK *);
  275 (* PLUS *);
  276 (* MINUS *);
  277 (* MULT *);
  278 (* DIV *);
  279 (* ASSIGN *);
  280 (* MODULO *);
  281 (* INCREMENT *);
  282 (* DECREMENT *);
  283 (* PLUSEQ *);
  284 (* MINUSEQ *);
  285 (* MULTEQ *);
  286 (* DIVEQ *);
  287 (* EQ *);
  288 (* NEQ *);
  289 (* LT *);
  290 (* LEQ *);
  291 (* GT *);
  292 (* GEQ *);
  293 (* TRUE *);
  294 (* FALSE *);
  295 (* AND *);
  296 (* OR *);
  297 (* NOT *);
  298 (* RETURN *);
  299 (* IF *);
  300 (* ELIF *);
  301 (* ELSE *);
  302 (* FOR *);
  303 (* WHILE *);
  304 (* NUM *);
  305 (* BOOL *);
  306 (* VOID *);
  307 (* STRING *);
  308 (* CHAR *);
  309 (* POINT *);
  310 (* SHAPE *);
  311 (* SQUARE *);
  312 (* RECT *);
  313 (* CIRCLE *);
  314 (* ELLIPSE *);
  315 (* TRIANGLE *);
  316 (* POLYGON *);
  317 (* REGAGON *);
  318 (* CANVAS *);
  319 (* LINE *);
  320 (* SPLINE *);
  321 (* ARRAY *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  322 (* LITERAL *);
  323 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\006\000\006\000\006\000\
\006\000\005\000\007\000\004\000\008\000\008\000\012\000\012\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\014\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\009\000\009\000\003\000\010\000\010\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\017\000\017\000\018\000\018\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\019\000\019\000\020\000\020\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\000\000\002\000\002\000\
\002\000\005\000\008\000\009\000\000\000\001\000\002\000\004\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\004\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\000\000\002\000\003\000\000\000\002\000\
\002\000\002\000\003\000\003\000\005\000\007\000\009\000\005\000\
\000\000\001\000\001\000\003\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\002\000\002\000\003\000\002\000\
\004\000\003\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\088\000\000\000\000\000\017\000\018\000\019\000\
\020\000\021\000\025\000\026\000\027\000\029\000\030\000\028\000\
\033\000\034\000\032\000\031\000\035\000\001\000\003\000\004\000\
\005\000\000\000\022\000\023\000\000\000\000\000\000\000\006\000\
\000\000\000\000\038\000\000\000\024\000\000\000\000\000\000\000\
\000\000\010\000\007\000\009\000\008\000\000\000\015\000\000\000\
\000\000\036\000\000\000\000\000\000\000\016\000\000\000\037\000\
\000\000\000\000\036\000\000\000\039\000\012\000\000\000\000\000\
\000\000\000\000\054\000\055\000\000\000\000\000\000\000\000\000\
\000\000\053\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000\078\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\075\000\077\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\083\000\044\000\000\000\079\000\043\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\081\000\000\000\
\000\000\000\000\048\000\000\000\000\000\000\000\046\000\000\000\
\000\000\047\000"

let yydgoto = "\002\000\
\003\000\004\000\056\000\024\000\025\000\036\000\045\000\038\000\
\053\000\057\000\026\000\040\000\027\000\028\000\076\000\077\000\
\123\000\083\000\126\000\127\000"

let yysindex = "\016\000\
\000\000\000\000\000\000\001\000\208\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\245\254\000\000\000\000\034\255\235\254\005\255\000\000\
\032\255\208\002\000\000\011\255\000\000\045\255\009\255\061\255\
\077\255\000\000\000\000\000\000\000\000\076\255\000\000\208\002\
\208\002\000\000\015\255\081\255\208\002\000\000\084\255\000\000\
\068\255\016\255\000\000\071\000\000\000\000\000\071\000\071\000\
\071\000\071\000\000\000\000\000\071\000\007\000\087\255\088\255\
\092\255\000\000\172\255\000\000\094\000\086\255\208\002\085\001\
\107\255\154\002\089\255\246\254\000\000\000\000\246\254\000\000\
\105\002\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\000\000\071\000\071\000\071\000\071\000\071\000\
\000\000\000\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\146\255\000\000\000\000\071\000\000\000\000\000\
\112\001\176\002\091\255\139\001\176\002\098\255\095\255\176\002\
\154\255\154\255\246\254\246\254\154\255\154\255\246\254\246\254\
\246\254\221\255\221\255\117\255\117\255\117\255\117\255\219\002\
\198\002\000\000\176\002\057\000\071\000\057\000\000\000\071\000\
\072\255\130\002\000\000\176\002\057\000\071\000\000\000\103\255\
\057\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\111\255\000\000\000\000\000\000\000\000\000\000\113\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\111\255\000\000\000\000\000\000\185\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\125\000\000\000\000\000\000\000\185\255\000\000\
\000\000\110\255\000\000\152\000\000\000\000\000\179\000\000\000\
\000\000\000\000\109\255\000\000\121\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\074\255\000\000\000\000\008\255\000\000\130\255\204\255\
\166\001\193\001\206\000\233\000\220\001\247\001\004\001\031\001\
\058\001\076\002\103\002\002\002\029\002\039\002\066\002\112\255\
\151\255\000\000\132\255\000\000\000\000\000\000\000\000\000\000\
\224\255\000\000\000\000\047\255\000\000\137\255\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\003\000\120\000\000\000\000\000\000\000\111\000\
\103\000\203\255\051\000\000\000\000\000\000\000\119\255\196\255\
\005\000\000\000\000\000\000\000"

let yytablesize = 1040
let yytable = "\080\000\
\022\000\030\000\082\000\084\000\085\000\086\000\023\000\081\000\
\087\000\089\000\153\000\041\000\155\000\034\000\105\000\106\000\
\001\000\086\000\029\000\159\000\035\000\030\000\042\000\162\000\
\086\000\115\000\033\000\030\000\030\000\121\000\122\000\124\000\
\125\000\128\000\129\000\130\000\131\000\132\000\043\000\133\000\
\134\000\135\000\136\000\137\000\032\000\037\000\138\000\139\000\
\140\000\141\000\142\000\143\000\144\000\145\000\046\000\031\000\
\087\000\147\000\006\000\007\000\008\000\009\000\010\000\087\000\
\011\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\047\000\060\000\048\000\061\000\062\000\
\063\000\054\000\078\000\050\000\039\000\049\000\050\000\064\000\
\154\000\050\000\055\000\156\000\065\000\066\000\059\000\090\000\
\091\000\122\000\051\000\039\000\092\000\035\000\119\000\058\000\
\067\000\068\000\149\000\151\000\069\000\070\000\071\000\152\000\
\161\000\072\000\073\000\060\000\157\000\061\000\117\000\063\000\
\013\000\063\000\014\000\051\000\049\000\063\000\064\000\063\000\
\063\000\058\000\084\000\065\000\066\000\074\000\075\000\100\000\
\101\000\102\000\103\000\085\000\104\000\105\000\106\000\067\000\
\068\000\052\000\049\000\069\000\070\000\071\000\063\000\063\000\
\072\000\073\000\060\000\044\000\061\000\146\000\063\000\052\000\
\064\000\079\000\160\000\000\000\064\000\064\000\064\000\064\000\
\000\000\000\000\065\000\066\000\074\000\075\000\102\000\103\000\
\000\000\104\000\105\000\106\000\093\000\000\000\067\000\068\000\
\000\000\000\000\069\000\070\000\071\000\000\000\064\000\072\000\
\073\000\039\000\094\000\039\000\039\000\039\000\095\000\096\000\
\097\000\098\000\000\000\000\000\039\000\000\000\000\000\000\000\
\000\000\039\000\039\000\074\000\075\000\082\000\000\000\000\000\
\000\000\082\000\000\000\082\000\082\000\039\000\039\000\000\000\
\000\000\039\000\039\000\039\000\000\000\000\000\039\000\039\000\
\045\000\000\000\045\000\045\000\045\000\000\000\000\000\100\000\
\101\000\102\000\103\000\045\000\104\000\105\000\106\000\000\000\
\045\000\045\000\039\000\039\000\000\000\109\000\110\000\111\000\
\112\000\000\000\005\000\000\000\045\000\045\000\000\000\000\000\
\045\000\045\000\045\000\000\000\000\000\045\000\045\000\060\000\
\000\000\000\000\000\000\063\000\000\000\000\000\088\000\000\000\
\000\000\000\000\064\000\000\000\000\000\000\000\000\000\065\000\
\066\000\045\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\068\000\000\000\000\000\069\000\
\006\000\007\000\008\000\009\000\010\000\000\000\011\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\060\000\000\000\061\000\000\000\063\000\000\000\000\000\
\074\000\075\000\000\000\000\000\064\000\000\000\000\000\060\000\
\000\000\065\000\066\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\000\000\000\000\067\000\068\000\065\000\
\066\000\069\000\070\000\071\000\000\000\000\000\072\000\073\000\
\000\000\000\000\000\000\067\000\068\000\099\000\000\000\069\000\
\100\000\101\000\102\000\103\000\000\000\104\000\105\000\106\000\
\000\000\000\000\074\000\075\000\107\000\108\000\109\000\110\000\
\111\000\112\000\000\000\000\000\113\000\114\000\056\000\000\000\
\074\000\075\000\056\000\000\000\056\000\056\000\000\000\056\000\
\056\000\056\000\056\000\000\000\056\000\056\000\056\000\000\000\
\000\000\000\000\000\000\056\000\056\000\056\000\056\000\056\000\
\056\000\080\000\000\000\056\000\056\000\080\000\000\000\080\000\
\080\000\000\000\080\000\080\000\080\000\080\000\000\000\080\000\
\000\000\000\000\000\000\000\000\000\000\000\000\080\000\080\000\
\080\000\080\000\080\000\080\000\065\000\000\000\080\000\080\000\
\065\000\000\000\065\000\065\000\000\000\065\000\065\000\065\000\
\065\000\000\000\065\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\000\065\000\065\000\065\000\065\000\065\000\073\000\
\000\000\065\000\065\000\073\000\000\000\073\000\073\000\000\000\
\073\000\073\000\073\000\073\000\000\000\073\000\000\000\000\000\
\000\000\000\000\000\000\000\000\073\000\073\000\073\000\073\000\
\073\000\073\000\074\000\000\000\073\000\073\000\074\000\000\000\
\074\000\074\000\000\000\074\000\074\000\074\000\074\000\000\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\074\000\
\074\000\074\000\074\000\074\000\074\000\068\000\000\000\074\000\
\074\000\068\000\000\000\068\000\068\000\000\000\068\000\068\000\
\068\000\068\000\000\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\068\000\068\000\068\000\068\000\068\000\
\069\000\000\000\068\000\068\000\069\000\000\000\069\000\069\000\
\000\000\069\000\069\000\069\000\069\000\000\000\069\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\069\000\069\000\
\069\000\069\000\069\000\070\000\000\000\069\000\069\000\070\000\
\000\000\070\000\070\000\000\000\070\000\070\000\070\000\070\000\
\000\000\070\000\000\000\000\000\000\000\000\000\000\000\000\000\
\070\000\070\000\070\000\070\000\070\000\070\000\116\000\000\000\
\070\000\070\000\000\000\000\000\000\000\000\000\000\000\100\000\
\101\000\102\000\103\000\000\000\104\000\105\000\106\000\000\000\
\000\000\000\000\000\000\107\000\108\000\109\000\110\000\111\000\
\112\000\148\000\000\000\113\000\114\000\000\000\000\000\000\000\
\000\000\000\000\100\000\101\000\102\000\103\000\000\000\104\000\
\105\000\106\000\000\000\000\000\000\000\000\000\107\000\108\000\
\109\000\110\000\111\000\112\000\150\000\000\000\113\000\114\000\
\000\000\000\000\000\000\000\000\000\000\100\000\101\000\102\000\
\103\000\000\000\104\000\105\000\106\000\000\000\000\000\000\000\
\000\000\107\000\108\000\109\000\110\000\111\000\112\000\071\000\
\000\000\113\000\114\000\071\000\000\000\071\000\071\000\000\000\
\071\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\071\000\071\000\071\000\071\000\
\071\000\071\000\072\000\000\000\071\000\071\000\072\000\000\000\
\072\000\072\000\000\000\072\000\072\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\
\072\000\072\000\072\000\072\000\072\000\066\000\000\000\072\000\
\072\000\066\000\000\000\066\000\066\000\000\000\066\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\000\066\000\066\000\066\000\066\000\066\000\
\067\000\000\000\066\000\066\000\067\000\000\000\067\000\067\000\
\000\000\067\000\067\000\059\000\000\000\000\000\000\000\059\000\
\000\000\059\000\059\000\000\000\000\000\067\000\067\000\067\000\
\067\000\067\000\067\000\000\000\000\000\067\000\067\000\000\000\
\059\000\059\000\059\000\059\000\059\000\059\000\060\000\000\000\
\059\000\059\000\060\000\000\000\060\000\060\000\000\000\000\000\
\061\000\000\000\000\000\000\000\061\000\000\000\061\000\061\000\
\000\000\000\000\000\000\060\000\060\000\060\000\060\000\060\000\
\060\000\000\000\000\000\060\000\060\000\061\000\061\000\061\000\
\061\000\061\000\061\000\062\000\000\000\061\000\061\000\062\000\
\000\000\062\000\062\000\000\000\000\000\057\000\000\000\000\000\
\000\000\057\000\000\000\057\000\057\000\000\000\000\000\000\000\
\062\000\062\000\062\000\062\000\062\000\062\000\000\000\000\000\
\062\000\062\000\057\000\057\000\000\000\000\000\000\000\000\000\
\058\000\000\000\057\000\057\000\058\000\000\000\058\000\058\000\
\120\000\000\000\000\000\100\000\101\000\102\000\103\000\000\000\
\104\000\105\000\106\000\000\000\000\000\058\000\058\000\107\000\
\108\000\109\000\110\000\111\000\112\000\058\000\058\000\113\000\
\114\000\158\000\000\000\000\000\100\000\101\000\102\000\103\000\
\000\000\104\000\105\000\106\000\000\000\000\000\000\000\000\000\
\107\000\108\000\109\000\110\000\111\000\112\000\000\000\000\000\
\113\000\114\000\118\000\000\000\100\000\101\000\102\000\103\000\
\000\000\104\000\105\000\106\000\000\000\000\000\000\000\000\000\
\107\000\108\000\109\000\110\000\111\000\112\000\000\000\000\000\
\113\000\114\000\100\000\101\000\102\000\103\000\000\000\104\000\
\105\000\106\000\000\000\000\000\000\000\000\000\107\000\108\000\
\109\000\110\000\111\000\112\000\000\000\000\000\113\000\114\000\
\100\000\101\000\102\000\103\000\000\000\104\000\105\000\106\000\
\000\000\000\000\000\000\000\000\107\000\108\000\109\000\110\000\
\111\000\112\000\000\000\000\000\113\000\100\000\101\000\102\000\
\103\000\000\000\104\000\105\000\106\000\000\000\000\000\000\000\
\000\000\107\000\108\000\109\000\110\000\111\000\112\000\006\000\
\007\000\008\000\009\000\010\000\000\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000"

let yycheck = "\060\000\
\000\000\013\001\063\000\064\000\065\000\066\000\004\000\061\000\
\069\000\070\000\148\000\001\001\150\000\009\001\025\001\026\001\
\001\000\010\001\067\001\157\000\016\001\013\001\012\001\161\000\
\017\001\079\000\048\001\013\001\013\001\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\036\000\100\000\
\101\000\102\000\103\000\104\000\011\001\014\001\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\010\001\067\001\
\010\001\118\000\048\001\049\001\050\001\051\001\052\001\017\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\067\001\009\001\017\001\011\001\012\001\
\013\001\067\001\067\001\010\001\034\000\009\001\011\001\020\001\
\149\000\016\001\010\001\152\000\025\001\026\001\011\001\009\001\
\009\001\158\000\048\000\049\000\009\001\016\001\014\001\053\000\
\037\001\038\001\016\001\010\001\041\001\042\001\043\001\017\001\
\010\001\046\001\047\001\009\001\045\001\011\001\012\001\013\001\
\010\001\010\001\010\001\014\001\016\001\014\001\020\001\016\001\
\017\001\079\000\010\001\025\001\026\001\066\001\067\001\019\001\
\020\001\021\001\022\001\010\001\024\001\025\001\026\001\037\001\
\038\001\014\001\010\001\041\001\042\001\043\001\039\001\040\001\
\046\001\047\001\009\001\036\000\011\001\012\001\013\001\049\000\
\010\001\059\000\158\000\255\255\014\001\020\001\016\001\017\001\
\255\255\255\255\025\001\026\001\066\001\067\001\021\001\022\001\
\255\255\024\001\025\001\026\001\009\001\255\255\037\001\038\001\
\255\255\255\255\041\001\042\001\043\001\255\255\040\001\046\001\
\047\001\009\001\023\001\011\001\012\001\013\001\027\001\028\001\
\029\001\030\001\255\255\255\255\020\001\255\255\255\255\255\255\
\255\255\025\001\026\001\066\001\067\001\010\001\255\255\255\255\
\255\255\014\001\255\255\016\001\017\001\037\001\038\001\255\255\
\255\255\041\001\042\001\043\001\255\255\255\255\046\001\047\001\
\009\001\255\255\011\001\012\001\013\001\255\255\255\255\019\001\
\020\001\021\001\022\001\020\001\024\001\025\001\026\001\255\255\
\025\001\026\001\066\001\067\001\255\255\033\001\034\001\035\001\
\036\001\255\255\002\001\255\255\037\001\038\001\255\255\255\255\
\041\001\042\001\043\001\255\255\255\255\046\001\047\001\009\001\
\255\255\255\255\255\255\013\001\255\255\255\255\016\001\255\255\
\255\255\255\255\020\001\255\255\255\255\255\255\255\255\025\001\
\026\001\066\001\067\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\255\255\255\255\041\001\
\048\001\049\001\050\001\051\001\052\001\255\255\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\009\001\255\255\011\001\255\255\013\001\255\255\255\255\
\066\001\067\001\255\255\255\255\020\001\255\255\255\255\009\001\
\255\255\025\001\026\001\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\255\255\255\255\037\001\038\001\025\001\
\026\001\041\001\042\001\043\001\255\255\255\255\046\001\047\001\
\255\255\255\255\255\255\037\001\038\001\016\001\255\255\041\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\255\255\255\255\066\001\067\001\031\001\032\001\033\001\034\001\
\035\001\036\001\255\255\255\255\039\001\040\001\010\001\255\255\
\066\001\067\001\014\001\255\255\016\001\017\001\255\255\019\001\
\020\001\021\001\022\001\255\255\024\001\025\001\026\001\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\010\001\255\255\039\001\040\001\014\001\255\255\016\001\
\017\001\255\255\019\001\020\001\021\001\022\001\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\010\001\255\255\039\001\040\001\
\014\001\255\255\016\001\017\001\255\255\019\001\020\001\021\001\
\022\001\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\010\001\
\255\255\039\001\040\001\014\001\255\255\016\001\017\001\255\255\
\019\001\020\001\021\001\022\001\255\255\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\010\001\255\255\039\001\040\001\014\001\255\255\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\010\001\255\255\039\001\
\040\001\014\001\255\255\016\001\017\001\255\255\019\001\020\001\
\021\001\022\001\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\010\001\255\255\039\001\040\001\014\001\255\255\016\001\017\001\
\255\255\019\001\020\001\021\001\022\001\255\255\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\010\001\255\255\039\001\040\001\014\001\
\255\255\016\001\017\001\255\255\019\001\020\001\021\001\022\001\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\010\001\255\255\
\039\001\040\001\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\255\255\024\001\025\001\026\001\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\010\001\255\255\039\001\040\001\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\255\255\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\010\001\255\255\039\001\040\001\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\026\001\255\255\255\255\255\255\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\010\001\
\255\255\039\001\040\001\014\001\255\255\016\001\017\001\255\255\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\010\001\255\255\039\001\040\001\014\001\255\255\
\016\001\017\001\255\255\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\010\001\255\255\039\001\
\040\001\014\001\255\255\016\001\017\001\255\255\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\010\001\255\255\039\001\040\001\014\001\255\255\016\001\017\001\
\255\255\019\001\020\001\010\001\255\255\255\255\255\255\014\001\
\255\255\016\001\017\001\255\255\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\255\255\255\255\039\001\040\001\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\010\001\255\255\
\039\001\040\001\014\001\255\255\016\001\017\001\255\255\255\255\
\010\001\255\255\255\255\255\255\014\001\255\255\016\001\017\001\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\255\255\255\255\039\001\040\001\031\001\032\001\033\001\
\034\001\035\001\036\001\010\001\255\255\039\001\040\001\014\001\
\255\255\016\001\017\001\255\255\255\255\010\001\255\255\255\255\
\255\255\014\001\255\255\016\001\017\001\255\255\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\255\255\255\255\
\039\001\040\001\031\001\032\001\255\255\255\255\255\255\255\255\
\010\001\255\255\039\001\040\001\014\001\255\255\016\001\017\001\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\026\001\255\255\255\255\031\001\032\001\031\001\
\032\001\033\001\034\001\035\001\036\001\039\001\040\001\039\001\
\040\001\016\001\255\255\255\255\019\001\020\001\021\001\022\001\
\255\255\024\001\025\001\026\001\255\255\255\255\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\255\255\255\255\
\039\001\040\001\017\001\255\255\019\001\020\001\021\001\022\001\
\255\255\024\001\025\001\026\001\255\255\255\255\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\255\255\255\255\
\039\001\040\001\019\001\020\001\021\001\022\001\255\255\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\255\255\255\255\039\001\040\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\255\255\255\255\255\255\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\255\255\255\255\039\001\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\026\001\255\255\255\255\255\255\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\048\001\
\049\001\050\001\051\001\052\001\255\255\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001"

let yynames_const = "\
  CONSTRUCTOR\000\
  CLASS\000\
  NULL\000\
  CONTINUE\000\
  BREAK\000\
  TRY\000\
  CATCH\000\
  RAISE\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LSQBRACKET\000\
  RSQBRACKET\000\
  COLON\000\
  SEMI\000\
  COMMA\000\
  QMARK\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  ASSIGN\000\
  MODULO\000\
  INCREMENT\000\
  DECREMENT\000\
  PLUSEQ\000\
  MINUSEQ\000\
  MULTEQ\000\
  DIVEQ\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  NOT\000\
  RETURN\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  NUM\000\
  BOOL\000\
  VOID\000\
  STRING\000\
  CHAR\000\
  POINT\000\
  SHAPE\000\
  SQUARE\000\
  RECT\000\
  CIRCLE\000\
  ELLIPSE\000\
  TRIANGLE\000\
  POLYGON\000\
  REGAGON\000\
  CANVAS\000\
  LINE\000\
  SPLINE\000\
  ARRAY\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 46 "parser.mly"
            ( _1 )
# 605 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                ( [], [], [] )
# 611 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 50 "parser.mly"
                ( (_2 :: fst' _1), snd' _1, trd _1 )
# 619 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 51 "parser.mly"
                ( fst' _1, (_2 :: snd' _1), trd _1 )
# 627 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cdecl) in
    Obj.repr(
# 52 "parser.mly"
                ( fst' _1, snd' _1, ( _2 :: trd _1) )
# 635 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                ( [], [], [] )
# 641 "parser.ml"
               : 'cddecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cddecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 56 "parser.mly"
                  ( (_2 :: fst' _1), snd' _1, trd _1 )
# 649 "parser.ml"
               : 'cddecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cddecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'const_decl) in
    Obj.repr(
# 57 "parser.mly"
                       ( fst' _1, [_2], trd _1 )
# 657 "parser.ml"
               : 'cddecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cddecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 58 "parser.mly"
                  ( fst' _1, snd' _1, (_2 :: trd _1) )
# 665 "parser.ml"
               : 'cddecls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'cddecls) in
    Obj.repr(
# 62 "parser.mly"
  ( {
    cname = _2;
    cdvars = fst' _4;
    cdconst = snd' _4;
    cdfuncs = trd _4;
  } )
# 678 "parser.ml"
               : 'cdecl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 71 "parser.mly"
  ( {
  ctformals = _3;
  ctlocals = List.rev _6;
  ctbody = List.rev _7; } )
# 690 "parser.ml"
               : 'const_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 78 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 705 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                  ( [] )
# 711 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 86 "parser.mly"
                  ( List.rev _1 )
# 718 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "parser.mly"
                             ( [(_1,_2)] )
# 726 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 90 "parser.mly"
                             ( (_3,_4) :: _1 )
# 735 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
        ( Num )
# 741 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
         ( Bool )
# 747 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
         ( Void )
# 753 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
           ( String )
# 759 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
         ( Char )
# 765 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'obj) in
    Obj.repr(
# 98 "parser.mly"
        ( _1 )
# 772 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arr) in
    Obj.repr(
# 99 "parser.mly"
        ( _1 )
# 779 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    Obj.repr(
# 102 "parser.mly"
                                ( Array )
# 786 "parser.ml"
               : 'arr))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
             ( () )
# 792 "parser.ml"
               : 'obj))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
             ( () )
# 798 "parser.ml"
               : 'obj))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
             ( () )
# 804 "parser.ml"
               : 'obj))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
             ( () )
# 810 "parser.ml"
               : 'obj))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
             ( () )
# 816 "parser.ml"
               : 'obj))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
             ( () )
# 822 "parser.ml"
               : 'obj))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
             ( () )
# 828 "parser.ml"
               : 'obj))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
             ( () )
# 834 "parser.ml"
               : 'obj))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
             ( () )
# 840 "parser.ml"
               : 'obj))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
             ( () )
# 846 "parser.ml"
               : 'obj))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
             ( () )
# 852 "parser.ml"
               : 'obj))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                     ( [] )
# 858 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 120 "parser.mly"
                     ( _2 :: _1 )
# 866 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 123 "parser.mly"
               ( (_1, _2) )
# 874 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
                   ( [] )
# 880 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 127 "parser.mly"
                   ( _2 :: _1 )
# 888 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
              ( Expr _1 )
# 895 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
                ( Return Noexpr )
# 901 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                     ( Return _2 )
# 908 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 133 "parser.mly"
                            ( Block(List.rev _2) )
# 915 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 134 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 923 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 135 "parser.mly"
                                            ( If(_3, _5, _7) )
# 932 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 137 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 942 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 138 "parser.mly"
                                  ( While(_3, _5) )
# 950 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                  ( Noexpr )
# 956 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                  ( _1 )
# 963 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                     (_1)
# 970 "parser.ml"
               : 'li_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                     (_3 :: _1)
# 978 "parser.ml"
               : 'li_contents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 150 "parser.mly"
                     ( Literal(_1) )
# 985 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "parser.mly"
                     ( BoolLit(true) )
# 991 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "parser.mly"
                     ( BoolLit(false) )
# 997 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 153 "parser.mly"
                     ( Id(_1) )
# 1004 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 1012 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 1020 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 1028 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 1036 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 1044 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 1052 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 1060 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 1068 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
                     ( Unop(Not, _2) )
# 1075 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 1083 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 1091 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
                    ( Binop(_1, Mult,  _3) )
# 1099 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                  ( Binop(_1, Div,   _3) )
# 1107 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                     ( Binop(_1, Mod, _3) )
# 1115 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                     ( () )
# 1123 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                     ( () )
# 1131 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                     ( () )
# 1139 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                     ( () )
# 1147 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                     ( () )
# 1154 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                     ( () )
# 1161 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                     ( () )
# 1168 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                     ( () )
# 1175 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'li_contents) in
    Obj.repr(
# 176 "parser.mly"
                                      ( () )
# 1182 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                         ( Unop(Neg, _2) )
# 1189 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 178 "parser.mly"
                                 ( Call(_1, _3) )
# 1197 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                     ( Assign(_1, _3) )
# 1205 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                       ( _2 )
# 1212 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "parser.mly"
                  ( [] )
# 1218 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 184 "parser.mly"
                  ( List.rev _1 )
# 1225 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                            ( [_1] )
# 1232 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 188 "parser.mly"
                            ( _3 :: _1 )
# 1240 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
